namespace Fido.Uaf.Shared.Tlv
{
    /// <summary>
    /// Tags used in the protocol.
    /// </summary>
    public enum TagTypes
    {
        /// <summary>
        /// TAG_UAFV1_REG_ASSERTION 0x3E01
        /// 
        /// The content of this tag is the authenticator response to a Register command.
        /// </summary>
        TagUafv1RegAssertion = 0x3e01,

        /// <summary>
        /// TAG_UAFV1_AUTH_ASSERTION 0x3E02
        /// 
        /// The content of this tag is the authenticator response to a Sign command.
        /// </summary>
        TagUafv1AuthAssertion = 0x3e02,

        /// <summary>
        /// TAG_UAFV1_KRD 0x3E03
        /// 
        /// Indicates Key Registration Data.
        /// </summary>
        TagUafv1Krd = 0x3e03,

        /// <summary>
        /// TAG_UAFV1_SIGNED_DATA 0x3E04
        /// 
        /// Indicates data signed by the authenticator using UAuth.priv key.
        /// </summary>
        TagUafv1SignedData = 0x3e04,

        /// <summary>
        /// TAG_ATTESTATION_CERT 0x2E05
        /// 
        /// Indicates DER encoded attestation certificate.
        /// </summary>
        TagAttestationCert = 0x2e05,

        /// <summary>
        /// TAG_SIGNATURE 0x2E06
        /// 
        /// Indicates a cryptographic signature.
        /// </summary>
        TagSignature = 0x2e06,

        /// <summary>
        /// TAG_ATTESTATION_BASIC_FULL 0x3E07
        /// 
        /// Indicates full basic attestation as defined in [UAFProtocol].
        /// </summary>
        TagAttestationBasicFull = 0x3e07,

        /// <summary>
        /// TAG_ATTESTATION_BASIC_SURROGATE 0x3E08
        /// 
        /// Indicates surrogate basic attestation as defined in [UAFProtocol].
        /// </summary>
        TagAttestationBasicSurrogate = 0x3e08,

        /// <summary>
        /// TAG_KEYID 0x2E09
        /// 
        /// Represents a generated KeyID.
        /// </summary>
        TagKeyId = 0x2e09,

        /// <summary>
        /// TAG_FINAL_CHALLENGE 0x2E0A
        /// 
        /// Represents a generated final challenge as defined in [UAFProtocol].
        /// </summary>
        TagFinalChallenge = 0x2e0a,

        /// <summary>
        /// TAG_AAID 0x2E0B
        /// 
        /// Represents an Authenticator Attestation ID as defined in [UAFProtocol].
        /// </summary>
        TagAaid = 0x2e0b,

        /// <summary>
        /// TAG_PUB_KEY 0x2E0C
        /// 
        /// Represents a generated public key.
        /// </summary>
        TagPubKey = 0x2e0c,

        /// <summary>
        /// TAG_COUNTERS 0x2E0D
        /// 
        /// Represents the use counters for an authenticator.
        /// </summary>
        TagCounters = 0x2e0d,

        /// <summary>
        /// TAG_ASSERTION_INFO 0x2E0E
        /// 
        /// Represents authenticator information necessary for message processing.
        /// </summary>
        TagAssertionInfo = 0x2e0e,

        /// <summary>
        /// TAG_AUTHENTICATOR_NONCE 0x2E0F
        /// 
        /// Represents a nonce value generated by the authenticator.
        /// </summary>
        TagAuthenticatorNonce = 0x2e0f,

        /// <summary>
        /// TAG_TRANSACTION_CONTENT_HASH 0x2E10
        /// 
        /// Represents a hash of the transaction content sent to the authenticator.
        /// </summary>
        TagTransactionContentHash = 0x2e10,

        /// <summary>
        /// TAG_EXTENSION 0x3E11, 0x3E12
        /// 
        /// This is a composite tag indicating that the content is an extension. 
        /// </summary>
        TagExtension = 0x3e11,
        TagExtensionNonCritical = 0x3e12,

        /// <summary>
        /// TAG_EXTENSION_ID 0x2E13
        /// 
        /// Represents extension ID.Content of this tag is a UINT8[] encoding of a UTF-8 string.
        /// </summary>
        TagExtensionId = 0x2e13,

        /// <summary>
        /// TAG_EXTENSION_DATA 0x2E14
        /// 
        /// Represents extension data.Content of this tag is a UINT8[] byte array. 
        /// </summary>
        TagExtensionData = 0x2e14,
    }
}
